#ifndef __GLTEXTVIEW__
#define __GLTEXTVIEW__

#include "Element.h"
#include "TextHolder.h"
#include "Font.h"
#include "TextRenderer.h"
#include "Carbon/ShaderProgram.h"

namespace e3
{
    class TextView : public Element, public TextHolder
    {
    public:
        TextView();

    public:
        virtual void Render();

        virtual void Update() override;

    public:
        void SetText(const std::string &text)
        {
            if (!text.size()) mText = "";
            else mText = text;
            mTextUpdated = true;
			ClearLines();
        }

        std::string getText() { return mText; }

//        void SetTextColor(const glm::vec3 &color) {
//            mColor = color / 255.f;
//        }
//
//        void SetTextColor(const glm::vec4 &color) {
//            mColor = glm::vec3(color) / 255.f;
//        }

        void setFontSize(int fontSize) override;

        void SetTextAlignVer(e3::EAlignment alignment);

        e3::EAlignment TextAlignVer();

        void SetTextAlignHor(e3::EAlignment alignment);

        e3::EAlignment TextAlignHor();

//        int FontSize() { return mFontSize; }

        std::string Text() { return mText; }

//        glm::vec3 TextColor() { return mColor; }


        void SetTextOverflow(ETextOverflow textOverflow) { mTextOverflow = textOverflow; }
        ETextOverflow GetTextOverflow() { return mTextOverflow; }
    private:
        e3::TextAlignFlags GetTextAlignFlags();

        // void GenerateRects(const std::string& line, std::vector<e3::Rect2f>& rects);
//        void GenerateTextLines(const std::string& text);
//        void AddText(char *text );
//        void AddGlyph(char* current, char* previous);
//        float GetLineWidth(const std::string& line);
    private:

        // int mFontSize = 0;
        float mTextWidth = 0;
        float mTextHeight = 0;
        std::string mText = "";
//        glm::vec3 mColor;
        bool mTextUpdated = true;
        e3::TextAlignFlags mTextAlignFlags;
        e3::EAlignment mTextAlignVer;
        e3::EAlignment mTextAlignHor;

        // std::vector<std::string> mLines;
//        std::vector<float> mLinesWidths;
        std::vector<std::vector<e3::Rect2f>> mLineRects;

        /*ftgl::vertex_buffer_t * buffer;
        ftgl::texture_atlas_t *atlas;*/
        glm::vec2           pen;
//        ftgl::texture_font_t * font = nullptr;
        //float mFontBottomOffset = 0.0f;
        ETextOverflow mTextOverflow = ETextOverflow::Clip;
    };
}

#endif // __GLTEXTVIEW__
