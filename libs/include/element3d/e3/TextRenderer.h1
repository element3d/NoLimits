#ifndef __CARBON_TEXT_RENDERER__
#define __CARBON_TEXT_RENDERER__

#include <Carbon.h>
#include "Enum.h"
#include <glm.hpp>
#include <vector>
#include <map>
#include <Yoga.h>
#include <e3/Types.h>

namespace e3
{
    class Font;

    struct TextRendererParams
    {
        float ScreenWidth;
        float ScreenHeight;
    };

    struct TextRenderParams
    {
        std::string Text;
        int         FontSize;
        e3::Rect2f  Rect;
        float       Z = 0.0f;
        glm::vec3   Color;
        glm::mat4   Projection;
        glm::mat4   Translate;
        glm::mat4   Rotate;
        glm::mat4   Scale;
        TextAlignFlags TextAlignFlags;
    };

    struct TextLineParams
    {
        int Index;
        int Length;
        std::string text;
        YGNodeRef Node;
        e3::Rect2f Rect;
    };

    class TextRenderer
    {
    public:
        static TextRenderer* Get() {
            if (sInstance)
                return sInstance;

            sInstance = new TextRenderer();
            return sInstance;
        }

    public:
        void Initialize(TextRendererParams* pParams);

    public:
        float Render(TextRenderParams* pParams, std::vector<e3::Rect2f>* outCharacterRects = nullptr);

        Carbon::ShaderProgram* GetTextShaderProgram() { return mTextShaderProgram; }
    private:
        TextRenderer();
        ~TextRenderer();

    private:
        void CreateFont(int fontSize);

    private:
        GLuint mVAO = 0;
        static TextRenderer* sInstance;
        Carbon::ShaderProgram* mShaderProgram = nullptr;
        Carbon::ShaderProgram* mTextShaderProgram = nullptr;
        Carbon::Buffer* mVertexBuffer = nullptr;
        //Font* mFont = nullptr;

        float mScreenWidth;
        float mScreenHeight;
        glm::mat4 mTranslate;
        std::map<int, Font*> mFonts;
    };
}

#endif // __CARBON_TEXT_RENDERER__